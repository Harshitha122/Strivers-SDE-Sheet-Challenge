#include <bits/stdc++.h> 
vector<int> maxMinWindow(vector<int> arr, int n) {
    // Write your code here.
    // int n = arr.size();
    vector<int> result(n + 1, INT_MIN), ans(n);
    stack<int> st;

    // Find the next smaller element on the left
    vector<int> next_smaller_left(n, -1);
    for (int i = 0; i < n; ++i) {
        while (!st.empty() && arr[i] <= arr[st.top()])
            st.pop();

        if (!st.empty())
            next_smaller_left[i] = st.top();

        st.push(i);
    }

    while (!st.empty())
        st.pop();

    // Find the next smaller element on the right
    vector<int> next_smaller_right(n, n);
    for (int i = n - 1; i >= 0; --i) {
        while (!st.empty() && arr[i] <= arr[st.top()])
            st.pop();

        if (!st.empty())
            next_smaller_right[i] = st.top();

        st.push(i);
    }

    // Calculate maximum of minimums for each window size
    for (int i = 0; i < n; ++i) {
        int window_size = next_smaller_right[i] - next_smaller_left[i] - 1;
        result[window_size] = max(result[window_size], arr[i]);
    }

    // Fill in remaining window sizes
    for (int i = n - 1; i >= 1; i--)
        result[i] = max(result[i], result[i + 1]);
    for (int i = 1; i <= n; i++)
        ans[i - 1] = result[i];
    return ans;
}

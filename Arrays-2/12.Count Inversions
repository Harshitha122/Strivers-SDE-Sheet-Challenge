#include <bits/stdc++.h> 
long long merge(long long *arr,long long temp[],long long low,long long mid,long long high){
   // vector<int> temp;
   //int n=arr.length();
   //int temp[n];
    long long l=low;
    long long r=mid+1;
    long long cnt=0;
    long long k=low;
    while((l<=mid) && (r<=high)){
        if(arr[l]<=arr[r]){
            temp[k++]=arr[l++];
        }
        else{
            temp[k++]=arr[r++];
            cnt+=(mid-l+1);
        }
    }
    while(l<=mid){
        temp[k++]=arr[l++];
    }
    while(r<=high){
        temp[k++]=arr[r++];
    }
    for(int left=low;left<=high;left++){
        arr[left]=temp[left];
    }
    return cnt;
}
long long merge_sort(long long *arr,long long temp[],long long low,long long high){
    long long cnt=0;
    if(low>=high){
        return cnt;
    }
    long long mid=(low+high)/2;
    cnt+=merge_sort(arr,temp,low,mid);
    cnt+=merge_sort(arr,temp,mid+1,high);
    cnt+=merge(arr,temp,low,mid,high);
    return cnt;
}
long long getInversions(long long *arr, int n){
    // Write your code here.
    long long cnt=0;
    
    long long temp[n];
    return merge_sort(arr,temp,0,n-1);
}
